heat_template_version: 2013-05-23

description: Deploy a CoreOS cluster that tracks the Alpha Channel

parameters:
  count:
    description: Number of CoreOS machines to deploy
    type: number
    default: 3
    constraints:
    - range:
        min: 1
        max: 12
      description: Must be between 3 and 12 servers.
  flavor:
    type: string
    default: OnMetal Compute v1
    constraints:
    - allowed_values:
      - OnMetal Compute v1
      - OnMetal I/O v1
      - OnMetal Memory v1
      description: |
        Must be a valid Rackspace Cloud Server flavor for the region you have
        selected to deploy into.
  name:
    type: string
    description: Name of each CoreOS machine booted
    default: CoreOS-alpha

resources:

  ssh_key:
    type: "OS::Nova::KeyPair"
    properties:
      name: { get_param: name }
      save_private_key: true

  deis_nodes:
    type: "OS::Heat::ResourceGroup"
    properties:
      count: { get_param: count }
      resource_def:
        type: OS::Nova::Server
        properties:
          key_name: { get_resource: ssh_key }
          image: "64b92981-69c6-4e8a-828b-4a20a8db9adc"
          flavor: { get_param: flavor }
          name: { get_param: name }
          user_data_format: RAW
          config_drive: "true"
          user_data: |
            #cloud-config
            ---
            coreos:
              etcd:
                # generate a new token for each unique cluster from https://discovery.etcd.io/new
                # uncomment the following line and replace it with your discovery URL
                addr: $private_ipv4:4001
                peer-addr: $private_ipv4:7001
                bind-addr: $private_ipv4
                peer-bind-addr: $private_ipv4
                discovery: https://discovery.etcd.io/58b922a460c8404e0a1f2aaae898d125
              fleet:
              units:
              - name: stop-update-engine.service
                command: start
                content: |
                  [Unit]
                  Description=stop update-engine
                  [Service]
                  Type=oneshot
                  ExecStart=/usr/bin/systemctl stop update-engine.service
                  ExecStartPost=/usr/bin/systemctl mask update-engine.service
              - name: create-coreos-env.service
                command: start
                content: |
                  [Unit]
                  Description=creates coreos environment
            
                  [Service]
                  Before=fix-etcd-env.service
                  Type=oneshot
                  ExecStartPre=/bin/sh -c "echo COREOS_PUBLIC_IPV4=`ifconfig bond0.101 | grep 'inet ' | awk '{print $2}'` >> /etc/environment"
                  ExecStart=/bin/sh -c "echo COREOS_PRIVATE_IPV4=`ifconfig bond0.401 | grep 'inet ' | awk '{print $2}'` >> /etc/environment"
              - name: fix-etcd-env.service
                command: start
                content: |
                  [Unit]
                  Description=fixes etcd service
            
                  [Service]
                  Before=etcd.service
                  Type=oneshot
                  ExecStart=/bin/sh -c "sed -i \"s/=:/=`ifconfig bond0.401 | grep 'inet ' | awk '{print $2}'`:/\" /run/systemd/system/etcd.service.d/20-cloudinit.conf"
                  ExecStartPost=systemctl daemon-reload
                  ExecStartPost=systemctl etcd restart
              - name: create-fleet-config.service
                command: start
                content: |
                  [Unit]
                  Description=creates fleet config, restarts fleet

                  [Service]
                  Before=etcd.service
                  Type=oneshot
                  ExecStartPre=/bin/mkdir -p /etc/fleet
                  ExecStart=/bin/sh -c "/bin/echo etcd_servers=[\"http://`ifconfig bond0.401 | grep 'inet ' | awk '{print $2}'`:4001\"] > /etc/fleet/fleet.conf'
                  ExecStartPost=/bin/systemctl restart fleet"
              - name: etcd.service
                command: start
              - name: fleet.service
                command: start
            write_files:
              - path: /etc/deis-release
                content: |
                  DEIS_RELEASE=latest
              - path: /etc/motd
                content: " \e[31m* *    \e[34m*   \e[32m*****    \e[39mddddd   eeeeeee iiiiiii   ssss\n\e[31m*   *  \e[34m* *  \e[32m*   *     \e[39md   d   e    e    i     s    s\n \e[31m* *  \e[34m***** \e[32m*****     \e[39md    d  e         i    s\n\e[32m*****  \e[31m* *    \e[34m*       \e[39md     d e         i     s\n\e[32m*   * \e[31m*   *  \e[34m* *      \e[39md     d eee       i      sss\n\e[32m*****  \e[31m* *  \e[34m*****     \e[39md     d e         i         s\n  \e[34m*   \e[32m*****  \e[31m* *      \e[39md    d  e         i          s\n \e[34m* *  \e[32m*   * \e[31m*   *     \e[39md   d   e    e    i    s    s\n\e[34m***** \e[32m*****  \e[31m* *     \e[39mddddd   eeeeeee iiiiiii  ssss\n\n\e[39mWelcome to Deis\t\t\tPowered by Core\e[38;5;45mO\e[38;5;206mS\e[39m\n"
              - path: /etc/profile.d/nse-function.sh
                permissions: 0755
                content: |
                  function nse() {
                    sudo nsenter --pid --uts --mount --ipc --net --target $(docker inspect --format="{{ .State.Pid }}" $1)
                  }
              - path: /run/deis/bin/get_image
                permissions: 0755
                content: |
                  #!/bin/bash
                  # usage: get_image <component_path>
                  IMAGE=`etcdctl get $1/image 2>/dev/null`

                  # if no image was set in etcd, we use the default plus the release string
                  if [ $? -ne 0 ]; then
                    RELEASE=`etcdctl get /deis/release 2>/dev/null`

                    # if no release was set in etcd, use the default provisioned with the server
                    if [ $? -ne 0 ]; then
                      source /etc/deis-release
                      RELEASE=$DEIS_RELEASE
                    fi

                    IMAGE=$1:$RELEASE
                  fi

                  # remove leading slash
                  echo ${IMAGE#/}

  deis_loadbalancer:
    type: Rackspace::Cloud::LoadBalancer
    properties:
      name: { get_param: name }
      nodes:
      - addresses: { get_attr: [deis_nodes, accessIPv4]} # This is where the
                                                       # wiring magic happens
        port: 80
        condition: ENABLED
      healthMonitor:
        attemptsBeforeDeactivation: 3
        delay: 10
        timeout: 120
        type: HTTP
        path: "/health-check"
        statusRegex: "."
        bodyRegex: "."
      protocol: HTTP
      port: 80
      virtualIps:
      - type: PUBLIC
        ipVersion: IPV4

outputs:
  lb_public_ip:
    description: The public IP address of the load balancer
    value: { get_attr: [deis_loadbalancer, PublicIp]}
  deis_node_ips:
    description: The public IP address of the load balancer
    value: { get_attr: [deis_nodes, accessIPv4]}
  private_key:
    description: SSH Private Key
    value: { get_attr: [ssh_key, private_key] }